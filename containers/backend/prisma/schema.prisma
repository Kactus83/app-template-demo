// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NavigationType {
  USER
  ADMIN
}

enum AuthMethodsHistoryType {
  EMAIL
  PHONE
  WALLET
}

// Enumération pour les Types d'Authentification
enum AuthenticationMethod {
  CLASSIC
  EMAIL
  OAUTH
  WEB3
  AUTHENTICATOR
  PHONE
}

// En,um pourles types d'actions sensibles 
enum SecureAction {
  CHANGE_EMAIL
  DELETE_ACCOUNT
  ALL
}

/// Définition des enums pour les scopes
enum ScopeTarget {
  AUTH
  USER
  BUSINESS
}

enum ScopePermission {
  READ
  WRITE
}

/// Enumération pour les roles d'utilisateurs
enum UserRole {
  USER
  ADMIN
}

/// Origine d'une action
enum ChangeInitiator {
  SELF
  ADMIN
}

/// Motif du changement de mot de passe
enum PasswordChangeReason {
  RESET_TOKEN
  SELF_SERVICE
  ADMIN_RESET
}

/// Action sur une méthode d’authentification
enum AuthMethodAction {
  ADDED
  REMOVED
}

model Navigation {
  id          Int            @id @default(autoincrement())
  type        NavigationType @unique
  compact     Json
  default     Json
  futuristic  Json
  horizontal  Json
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model User {
  id                        Int                     @id @default(autoincrement())
  email                     String?                 @unique
  username                  String?                 @unique
  isEmailVerified           Boolean                 @default(false)
  secondaryEmail            String?                 @unique
  isSecondaryEmailVerified  Boolean                 @default(false)
  password                  String?
  firstName                 String?
  lastName                  String?
  avatar                    String?
  status                    String?
  roles                     UserRole[]
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  authMethods               AuthenticationMethod[]

  // Relations Externes
  passwordResetTokens       PasswordResetToken[]
  emailChangeTokens         EmailChangeToken[]
  emailVerificationTokens   EmailVerificationToken[]
  secondaryEmailDeletionToken SecondaryEmailDeletionToken[]
  web3Accounts              Web3Account[]           // Relation un-à-plusieurs pour les comptes Web3
  oauthAccounts             OAuthAccount[]          // Relation un-à-plusieurs pour les comptes OAuth
  authenticator             Authenticator?          // Authenticator (clé secrète TOTP)
  phones                    Phone[]                 // Relation un-à-plusieurs pour les téléphones
  MFATokens                 MFAToken?               // Relation un a unique car pas possible d'entammer deux actions securisées a la fois.
  emailMFAToken             EmailMFAToken?  
  MFANonces                 MFANonce[]
  notifications             Notification[]
  messages                  Message[]
  oauthMFATokens            OAuthMFAToken[]  
  userAuthMethods           UserAuthMethod[]
  connectionHistories       ConnectionHistory[]
  passwordHistories         PasswordHistory[]
  authMethodsHistories      AuthMethodsHistory[]
  serviceAccounts           UserServiceAccount[]
  preferences               UserPreferences?
  profile                   UserProfile?   
  templates                 UserTemplate[]     
}

/// Préférences générales de l’utilisateur
model UserPreferences {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  locale    String   @default("en")    // ex. "fr", "en-GB"
  timezone  String   @default("UTC")   // ex. "Europe/Paris"
  theme     String   @default("light") // "light" | "dark"
  updatedAt DateTime @updatedAt
}

/// Profil public de l’utilisateur
model UserProfile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  bio         String?                 // texte libre
  twitterUrl  String?                 // URL Twitter
  linkedInUrl String?                 // URL LinkedIn
  facebookUrl String?                 // URL Facebook
  bannerUrl   String?                 // URL image de bannière
  updatedAt   DateTime @updatedAt
}


/// Compte service pour les scrips / app externes de l'utilisateur
model UserServiceAccount {
  id               String                   @id @default(uuid())
  userId           Int
  name             String                   // ex. "CLI principal", "Webhook Bot"
  clientId         String                   @unique @default(uuid())
  clientSecret     String                   // hashé (bcrypt/argon2)
  validFrom        DateTime                 @default(now())
  validTo          DateTime?                // null = illimité
  allowedIps       String[]                // liste d’IP ou CIDR
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt

  /// Relation vers l’utilisateur “maître”
  user             User                     @relation(fields: [userId], references: [id])

  /// Scopes autorisés pour ce compte
  scopes           ServiceAccountScope[]
}

/// Association 1-N entre compte service et scopes (target + permission)
model ServiceAccountScope {
  id               Int                      @id @default(autoincrement())
  accountId        String
  target           ScopeTarget
  permission       ScopePermission

  account          UserServiceAccount       @relation(fields: [accountId], references: [id])

  @@unique([accountId, target, permission])
}

/// Historique des connexions d’un utilisateur
model ConnectionHistory {
  id           Int                     @id @default(autoincrement())
  user         User                    @relation(fields: [userId], references: [id])
  userId       Int

  ipAddress    String
  userAgent    String?
  success      Boolean
  method       AuthenticationMethod
  createdAt    DateTime                @default(now())
  lastActivity DateTime
  location     String?
  meta         Json?

  @@index([userId])
}


/// Historique des anciens mots de passe
model PasswordHistory {
  id          Int                     @id @default(autoincrement())
  user        User                    @relation(fields: [userId], references: [id])
  userId      Int

  password    String
  changedBy   ChangeInitiator
  reason      PasswordChangeReason
  timestamp   DateTime                @default(now())
  ipAddress   String?
  meta        Json?

  @@index([userId])
}


/// Historique des contacts (email / téléphone / wallet)
model AuthMethodsHistory {
  id           Int                    @id @default(autoincrement())
  user         User                   @relation(fields: [userId], references: [id])
  userId       Int

  type         AuthMethodsHistoryType
  value        String
  action       AuthMethodAction
  performedBy  ChangeInitiator
  timestamp    DateTime               @default(now())
  meta         Json?

  @@index([userId])
}


model UserAuthMethod {
  id          Int                   @id @default(autoincrement())
  user        User                  @relation(fields: [userId], references: [id])
  userId      Int
  method      AuthenticationMethod
  methodId    Int?
  order       Int
  createdAt   DateTime              @default(now())

  @@unique([userId, method, methodId])
  @@index([userId, order])
}

model Message {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  icon        String?
  image       String?
  time        DateTime @default(now())
  link        String?
  useRouter   Boolean  @default(false)
  read        Boolean  @default(false)

  // Relation avec l'utilisateur
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
}

model MFAToken {
  id              String          @id @default(uuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          Int             @unique
  token           String          @unique
  action          SecureAction
  stepsValidated  AuthenticationMethod[]
  stepsRequired   AuthenticationMethod[]
  expiresAt       DateTime
  createdAt       DateTime        @default(now())
  used            Boolean         @default(false)

  @@index([userId, action])
}

model Notification {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  icon        String?
  image       String?
  time        DateTime
  link        String?
  useRouter   Boolean  @default(false)
  read        Boolean  @default(false)

  // Relation avec l'utilisateur
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
}

model Authenticator {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  secret      String   // Clé secrète TOTP
  qrCodeURL   String   @unique
  enabled     Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Phone {
  id           Int                   @id @default(autoincrement())
  user         User                  @relation(fields: [userId], references: [id])
  userId       Int
  phoneNumber  String                @unique
  isVerified   Boolean               @default(false)
  createdAt    DateTime              @default(now())
  
  // Relation avec les Tokens de Vérification (optionnel)
  verificationTokens PhoneVerificationToken[]
}

model PhoneVerificationToken {
  id        Int      @id @default(autoincrement())
  phone     Phone    @relation(fields: [phoneId], references: [id])
  phoneId   Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Modèle pour les Comptes Web3
model Web3Account {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  wallet    String   @unique           // Adresse du wallet
  createdAt DateTime @default(now())

  @@index([wallet], name: "idx_web3_wallet")
}

// Modèle pour les Comptes OAuth
model OAuthAccount {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  provider     String
  providerId   String   // ID unique fourni par le fournisseur OAuth
  email        String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@unique([provider, providerId])
}

// Modèle pour les Tokens MFA OAuth
model OAuthMFAToken {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  provider   String
  providerId String
  token      String   @unique
  hasBeenValidated Boolean @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([userId, provider, providerId], name: "idx_oauth_mfa_user_provider")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model EmailChangeToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  emailType EmailType
  newEmail  String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([userId, emailType])
}

model EmailVerificationToken {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  emailType   EmailType
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@unique([userId, emailType])
}

model SecondaryEmailDeletionToken {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model EmailMFAToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  code      String      @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  validated Boolean  @default(false)

  @@index([userId])
}

enum EmailType {
  PRIMARY
  SECONDARY
}

model Nonce {
  id        Int      @id @default(autoincrement())
  wallet    String   @unique
  nonce     String
  createdAt DateTime @default(now())

  @@index([wallet], name: "idx_nonce_wallet")
}

model MFANonce {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  wallet    String   @unique
  nonce     String
  hasBeenValidated Boolean @default(false)
  createdAt DateTime @default(now())

  @@index([wallet], name: "idx_MFA_nonce_wallet")
}

model Version {
  id        Int      @id @default(autoincrement())
  backend   String
  frontend  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contract {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  address   String   @unique
  abi       Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  filePath    String
  publicUrl   String  // URL publique (ex: "/uploads/…")
  size        Int?
  createdAt   DateTime  @default(now())

  // relation vers les téléchargements par utilisateur
  userTemplates UserTemplate[]
}

/// Table de liaison pour les téléchargements/utilisation par utilisateur
model UserTemplate {
  /// composite PK (1 seul enregistrement par user/template)
  userId      Int
  templateId  Int

  /// nombre de téléchargements
  downloadCount Int   @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  template Template @relation(fields: [templateId], references: [id])

  @@id([userId, templateId])
}